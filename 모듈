모듈
 - 코드의 재활용성을 높이고, 유지보수를 쉽게 할 수 있는 다양한 기법들이 사용되고 있다.
   그 중의 하나가 코드를 여러개의 파일로 분리하는 것이다. 

 - 하나의 프로세스를 수행하는 단위 프로그램을 모듈이라고 한다. 
   모듈은 더 이상 나누어지지 않는 최소 단위 프로그램이다. 
   모듈은 가능한 사이즈가 작아야 한다.

 - 모듈에 특수한 지시자 export와 import를 적용하면 다른 모듈을 불러와 불러온 모듈에 있는 함수를 호출하는 것과 같은 기능 공유가 가능하다.
   모듈 내보내기 : export 지시자를 변수나 함수 앞에 붙이면 외부 모듈에서 해당 변수나 함수에 접근할 수 있다.
   모듈 가져오기 : import 지시자를 사용하면 외부 모듈의 기능을 가져올 수 있다.

 - [sayHi.js]
    export function sayHi(user) {
        alert(`Hello, ${user}!`);
    }

 - import {sayHi} from './sayHi.js';
   alert(sayHi); // 함수
   sayHi('John'); // Hello, John!

 - 모듈은 특수한 키워드나 기능과 함께 사용되므로 <script type="module"> 같은 속성을 설정해 해당 스크립트가 모듈이란 걸 브라우저가 알 수 있게 해줘야 한다.
   <!doctype html>
   <script type="module">
        import {sayHi} from './say.js';
        document.body.innerHTML = sayHi('John');
   </script>

 - 모듈은 항상 엄격 모드(use strict)로 실행된다. 
   선언되지 않은 변수에 값을 할당하는 등의 코드는 에러를 발생시킨다.
   <script type="module">
        a = 5; // 에러
   </script>

 - 모듈은 자신만의 스코프가 있다. 
   따라서 모듈 내부에서 정의한 변수나 함수는 다른 모듈의 스크립트에서 접근할 수 없다.
   브라우저 환경에서도 <script type="module">을 사용해 모듈을 만들면 독립적인 스코프가 만들어진다.
   <script type="module">
        let user = "John";
    </script>
    <script type="module">
        alert(user); // Error: user is not defined
    </script>