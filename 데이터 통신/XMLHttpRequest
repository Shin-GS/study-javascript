XMLHttpRequest
 - XMLHttpRequest 객체를 사용하여 서버에 동기 또는 비동기식 요청을 보낼 수 있으며 요청에 대한 응답 정보를 웹 페이지에 로드할 수 있다.
   따라서 웹페이지를 다시 로드하지 않아도 웹 페이지의 일부를 변경할 수 있다.

 - 사용방법
   1)XMLHttpRequest 객체 생성
   2)open() 메서드로 요청에 필요한 정보를 설정
     XMLHttpRequest.open(method, url, [async, user, password]); //async의 기본값은 true이며 동기식으로 동작한다.
     XMLHttpRequest.setRequestHeader("content-type", "application/json"); //요청헤더 정의(응답값, charset)
   3)send() 메서드로 서버에 요청을 보냄
     POST나 PUT시에는 데이터를 전달할 수 있는데 이때 문자열로 변환해줄 필요가 있다.
     JSON.stringify(data);
   4)응답에 대한 콜백 함수를 생성
     XMLHttpRequest.status(HTTP 상태코드), XMLHttpRequest.statusText(HTTP 상태 메시지), XMLHttpRequest.response(요청에 대한 응답)
     응답값을 JSON 데이터 형식으로 변환해줄 필요가 있다.
     JSON.parse(xhr.response)

 - const xhr = new XMLHttpRequest();
   xhr.open("GET", "http://localhost:3000/posts");
   xhr.setRequestHeader("content-type", "application/json");
   xhr.send();
   xhr.onload = () => {
        if (xhr.status === 200) {
            console.log(JSON.parse(xhr.response));
        } else {
            console.error(xhr.status, xhr.statusText);
        }
   };

 - const xhr = new XMLHttpRequest();
   xhr.open("POST", "http://localhost:3000/posts");
   xhr.setRequestHeader("content-type", "application/json;charset=UTF-8");
   xhr.send(JSON.stringify({title: "title", author: "author"}));
   xhr.onload = () => {
      if (xhr.status === 200) {
          console.log(JSON.parse(xhr.response));
      } else {
          console.error(xhr.status, xhr.statusText);
      }
   }

 - const xhr = new XMLHttpRequest();
   xhr.open("PUT", "http://localhost:3000/posts/1");
   xhr.setRequestHeader("content-type", "application/json;charset=UTF-8");
   xhr.send(JSON.stringify({title: "title", author: "author"}));
   xhr.onload = () => {
      if (xhr.status === 200) {
          console.log(JSON.parse(xhr.response));
      } else {
          console.error(xhr.status, xhr.statusText);
      }
   }

 - const xhr = new XMLHttpRequest();
   xhr.open("DELETE", "http://localhost:3000/posts/1");
   xhr.setRequestHeader("content-type", "application/json;charset=UTF-8");
   xhr.send();
   xhr.onload = () => {
      if (xhr.status === 200) {
          console.log(JSON.parse(xhr.response));
      } else {
          console.error(xhr.status, xhr.statusText);
      }
   }

 - promise를 사용해서 코드의 재사용성을 향상시킬 수 있다.