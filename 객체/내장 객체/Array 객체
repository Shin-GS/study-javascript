Array 객체
 - let arrNumber = new Array(); //배열선언
 - let arrNumber = new Array("a","b","c","d");
 - let arrNumber = [1,2,3,4]; 

대표 속성(property)와 메서드(method)
1)배열에 새로운 값을 넣는 방법
 - let arrNumber = new Array(); //배열선언
    arrNumber[0] = 1;
    arrNumber[1] = 2;
    arrNumber[2] = 3;
    arrNumber[3] = 4;
    arrNumber[4] = 5;	

2)for-in 문을 사용한 배열 접근법
 - let array = ['포도', '사과', '바나나', '망고'];
    for(let i in array) {
        console.log(array[i]);
    }

3)for-of 문을 사용한 배열 접근법
 - let array = ['포도', '사과', '바나나', '망고'];
    for(let i of array) {
        console.log(i);
    }

4)foreach 문을 사용한 배열 접근법
 - [].forEach(함수(요소, 인덱스))
 - var arr = [0, 1, 2, 3, 4, true, 6, "df", false, 9, 10];
    arr.forEach(function(element, index){
        console.log(index +":"+element);
    });

5)toString은 배열을 문자열로 변환해준다.
 - ex)let eArr = new Array("a", "b", "c"); 
      console.log(eArr.toString()); //a,b,c

6)join을 사용하면 배열값 사이에 원하는 문자를 삽입할 수 있다.
 - toString()과 비슷하게 배열을 문자열로 바꾸지만 배열 요소에 원하는 연결문자를 붙일 수 있다는 차이점이 있다.
 - ex)let eArr = new Array("a", "b", "c");
       console.log(eArr.join("/")); //a/b/c

7)push는 배열의 끝에 원하는 값을 추가해주는 함수이다.
 - 배열의 길이를 반환
 - ex)let example = new Array("a", "b", "c");
      example.push("d"); //a,b,c,d

8)pop은 배열의 마지막 주소에 있는 값을 제거해주는 함수이다.
 - 제거된 요소를 반환
 - ex)let example = new Array("a", "b", "c");
      example.pop(); //a,b

9)unshift는 배열의 첫번째 위치에 값을 추가해주는 함수이다.
 - 배열의 길이를 반환
 - ex)let example = new Array("a", "b", "c");
      example.unshift("d"); //d,a,b,c

10)shift는 배열의 첫번째 주소에 있는 값을 제거해주는 함수이다.
 - 제거된 요소를 반환
 - ex)let example = new Array("a", "b", "c");
      example.shift(); //b,c

11)splice는 배열의 특정 위치에 새로운 요소를 추가할 수 있다.
 - splice(start, count, [새로 추가할 요소]);
 - 삭제된 기존 요소는 반환된다.
 - ex)let example = ["a", "b", "c", "d"];
       let example2 = example.splice(1, 2,"1","2");
       console.log(example); //a,1,2,d
       console.log(example2); //b,c

12)length는 배열의 길이를 반환해주는 함수이다.
 - ex)let example = new Array("a", "b", "c"); //3

13)concat은 여러개의 배열을 합쳐주는 기능을 하는 함수이다.
 - 한번에 여러개의 배열을 합칠 수 있다.
 - ex)let example = new Array("a", "b", "c");
       let example2 = new Array("d","e","f");
       let example3 = example.concat(example2); //a,b,c,d,e,f
 - ...을 사용해도 동일한 동작을 구현할 수 있다.
   let arr = [...arr1, ...arr2, ...arr3];

14)sort를 사용하면 배열을 정렬할 수 있다.
 - ex)let example = new Array(1,4,2,3,5);
       example.sort(); //1,2,3,4,5
 - 함수를 통해 재정의 후 사용할 수 있다.
   array.sort(function(a, b) {
        if(a>b) return 1;
        else if(a<b) return -1;
        else return 0;
   });
   array.sort(function(a, b) {
        return a - b;
   });

15)reverse를 사용하면 배열을 역순으로 재배치 할 수 있다.
 - ex)let example = new Array("a", "b", "c");
       example.reverse(); //c,b,a

16)slice는 배열의 요소를 잘라내서 배열 형태로 반환하는 함수이다.
 - slice(start, [end]) : 인덱스가 start인 지점부터 end 위치의 직전까지 잘라내어 새로운 배열을 반환한다.
 - ex)let example = [1, 2, 3, 4];
       let example2 = example.slice(0, -1); //1,2,3
       let example2 = example.slice(-2); //3,4

17)filter는 특정 조건에 만족하는 요소만 찾아서 새로운 배열로 반환한다.
 - for와 if문을 통해 같은 기능을 구현할 수 있지만 filter를 사용해서 더 간략하게 구현할 수 있다.
 - ex)let newArray = array.filter(function(value) {
            return value > 100; //true, false 리턴
        });

18)map은 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환하는 함수이다.
 - arr.map(callback, [args])
 - callback : 새로운 배열 요소를 생성하는 함수
   반환타입 : 배열
 - ex)let nums=[1,2,3,4,5];
       let numArr1=[];

       //map 사용X
       for(let i=0;i<nums.length;i++)
           numArr1.push(nums[i] * nums[i]); //[1,4,8,16,25]

       //map 사용O
       let numArr2=nums.map(function(val, i){
           return val*val; //[1,4,8,16,25]
       });

19)reduce를 통해서 배열의 각 요소를 순회하며 callback 함수의 실행 값을 누적하여 하나의 결과값을 반환할 수 있다.
 - arr.reduce(callback[, initialValue]);
 - callback 함수는 4가지 인수를 가진다.
   accumulator : callback함수의 반환값을 누적합니다.
   currentValue : 배열의 현재 요소
   index : 배열의 현재 요소의 인덱스(Optional)
   array : 호출한 배열(Optional)
 - initialValue은 최초 callback함수 실행 시 accumulator 인수에 제공되는 값이다.
   초기값을 제공하지 않을경우 배열의 첫 번째 요소를 사용하고 빈 배열에서 초기값이 없을 경우 에러가 발생한다.
 - const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const sum = numbers.reduce((total, value) => total + value);