1)할당 연산자
 - 할당 연산자는 오른쪽 피연산자의 값을 왼쪽 피연산자에 할당한다.
 - 할당 : x=y, x=y
 - 덧셈 할당 : x+=y, x=x+y
 - 뺄셈 할당 : x-=y, x=x-y
 - 곱셈 할당 : x*=y, x=x*y
 - 나눗셈 할당 : x/=y, x=x/y
 - 나머지 연산 할당 : x%=y, x=x%y
 - 지수 연산 할당 : x**=y, x=x**y
 - 왼쪽 이동 연산 할당 : x<<=y,	 x=x<<y
 - 오른쪽 이동 연산 할당 : x>>=y, x=x>>y
 - 부호 없는 오른쪽 이동 연산 할당 : x>>>=y, x=x>>>y
 - 비트 AND 할당 : x&=y, x=x&y
 - 비트 XOR 할당 : x^=y, x=x^y
 - 비트 OR 할당 : x|=y, x=x|y

2)비교 연산자
 - 비교 연산자는 피연산자들을 비교하고 비교에 따라 논리 값을 반환한다. 
 - 피연산자들은 숫자, 문자열, 논리형, 객체를 사용할 수 있다. 
 - 문자열은 유니코드 값을 사용하여 표준 사전순서를 기반으로 비교한다. 
 - 만약 두 피연산자가 다른 형태일 경우, JavaScript는 대부분 비교를 위해 피연산자를 적절한 타입으로 변환한다. 
 - 형태를 바꾸기의 유일한 예외는 엄격한 비교를 수행하는 === 과 !== 연산이 관련되는 경우이다. 
   (이런 연산자는 비교를 위해 피연산자의 형태를 적절히 바꾸려고 시도하지 않는다)
 - 동등(==) : 피연산자들이 같으면 참을 반환한다.
 - 부등(!=) : 피연산자들이 다르면 참을 반환한다.
 - 일치(===) : 피연산자들이 같고 피연산자들의 같은 형태인 경우 참을 반환한다
 - 불일치(!==) : 피연산자들이 다르거나 형태가 다른 경우 참을 반환한다.
 - ~보다 큰(>) : 좌변의 피연산자 보다 우변의 피연산자가 크면 참을 반환한다.
 - ~보다 크거나 같음(>=) : 좌변의 피연산자 보다 우변의 피연산자가 크거나 같으면 참을 반환한다.
 - ~보다 작음(<) : 좌변의 피연산자 보다 우변의 피연산자가 작으면 참을 반환한다.
 - ~보다 작거나 같음(<=) : 좌변의 피연산자 보다 우변의 피연산자가 작거나 같으면 참을 반환한다.

3)산술 연산자
 - 산술 연산자는 숫자값(리터럴 또는 변수)을 피연산자로 갖고, 하나의 숫자 값을 반환한다. 
 - 기본적인 산술 연산자는 덧셈(+), 뺄셈 (-), 곱셈 (*), 나눗셈 (/)이다.
 - 나머지 연산자(%) : 이항 연산자(두 피연산자를 나눈후 나머지를 반환한다)
 - 증가 연산자(++) : 단항 연산자(피연산자에 1을 더한다)
 - 감소 연산자(--) : 단항 연산자(피연산자에 1을 뺸다)
 - 단항 부정 연산자(-) : 단항 연산자(피연산자의 반대값(부호 바뀐값)을 반환한다)
 - 숫자화 연산자(+) : 단항 연산자(피연산자가 숫자값이 아니라면 피연산자를 숫자로 변환하기를 시도한다)

4)비트 연산자
 - 비트 연산자는 피연산자를 10진수, 16진수, 8진수처럼 취급하지 않고 32비트의 집합으로 취급한다.
 - 비트단위 논리곱(a&b) : 두 피연산자의 각 자리 비트의 값이 둘다 1일 경우 해당하는 자리에 1을 반환한다.
 - 비트단위 논리합(a|b) : 두 피연산자의 각 자리 비트의 값이 둘다 0일 경우 해당하는 자리에 0을 반환한다.
 - 비트단위 배타적 논리합(a^b) : 두 피연산자의 각 자리 비트의 값이 같을 경우 해당하는 자리에 0을 반환한다.
                               두 피연산자의 각 자리 비트의 값이 다를 경우 해당하는 자리에 1을 반환한다.
 - 비트단위 부정(~a) : 피연산자의 각 자리의 비트를 뒤집는다.
 - 왼쪽 시프트(a<<b) : 오른쪽에서 0들을 이동시키면서, a의 이진수의 각 비트를 b비트 만큼 왼쪽으로 이동시킨 값을 반환한다.
 - 부호 전파 오른쪽 시프트(a>>b) : 사라지는 비트를 버리면서, a의 이진수의 각 비트를 b비트만큼 이동시킨값을 반환한다.
 - 부호 없는 오른쪽 시프트(a>>>b) : 사라지는 비트를 버리고 왼쪽에서 0을 이동시키면서, 
                                  a의 이진수의 각 비트를 b비트 만큼 이동시킨 값을 반환한다.

5)논리 연산자
 - 논리 연산자는 보통 부울 값과 사용한다. 
 - 부울 값들과 사용될때, 연산자는 부울값을 반환한다.
 - 논리 AND(&&) : expr1 && expr2
 - 논리 OR(||) : expr1 || expr2	
 - 논리 NOT(!) : !expr

6)문자열 연산자
 - 연결 연산자(+)는 두 문자열 값을 연결하고, 두 문자열이 합쳐진 새로운 문자열을 반환한다. 
 - 복합 할당 연산자인 += 또한 문자열을 연결하는데 사용할 수 있다.

7)조건 (삼항) 연산자
 - 조건 ? 값1 : 값2
 - 만약 조건이 참이라면, 조건 연산자는 값1을 값으로 갖는다. 
   그렇지 않은 경우 조건 연산자는 값2을 값으로 갖는다.

8)쉼표 연산자
 - 쉼표 연산자(,)는 두 피연산자를 평가하고, 마지막 피연산자의 값을 반환한다. 
 - 이 연산자는 주로 for 반복문 안에서 각각의 시간에 복수의 변수들을 갱신하기 위하여 사용한다.
 - ex)let x = [0,1,2,3,4,5,6,7,8,9]
        let a = [x, x, x, x, x];
        for (let i = 0, j = 9; i <= j; i++, j--)
            console.log('a[' + i + '][' + j + ']= ' + a[i][j]);

9)단항 연산자
 - 단항 연산자는 오직 하나의 피연산자를 가지고 연산을 한다.
 - delete연산자는 객체, 객체의 속성 또는 배열의 특정한 위치에 있는 객체를 삭제한다. 
   delete objectName;
   delete objectName.property;
   delete objectName[index];
   delete property; // legal only within a with statement
 - typeof 연산자 피연산자의 타입을 나타내는 문자열을 반환한다. 
   피연산자는 어떤 타입인지 반환될 문자열, 변수, 키워드 또는 객체이다. 
   괄호 표현은 선택사항이다.
   typeof 피연산자 = typeof (피연산자)
 - void 연산자는 값을 반환하지 않고 평가되도록 명시한다.
   void (식) = void 식

10)관계 연산자
 - 관계 연산자는 피연산자들을 비교하고, 비교의 참 여부에 기반하여 부울 값을 반환한다.
 - in 연산자는 객체에 특정한 속성이 있는경우 true를 반환한다.
   propNameOrNumber in objectName
   propNameOrNumber는 속성의 이름을 나타내는 문자열 또는 배열의 인덱스를 나타내는 숫자이고, objectName은 객체의 이름이다.
   ex)"PI" in Math; //returns true
 - instanceof 연산자는 명시된 객체가 명시된 객체형인 경우 true를 반환한다.
   objectName instanceof objectType
   objectName은 objectType 과 비교할 객체의 이름이고, objectType은 Date 또는 Array과 같은 객체형이다.
   ex)let theDay = new Date(1995, 12, 17);
       if (theDay instanceof Date) {
       }
