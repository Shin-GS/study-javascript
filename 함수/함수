1)함수 선언식
 - hoisting 가능
 - function 함수명([인자1, 인자2, ...]) {
        코드
        [return 반환값]
    }
    함수명(인자값);
 - function addOne(x) {
        let y = x + 1;
        return y;
    }
    let i = addOne(1);

2)함수 표현식(리터럴 방식)
 - 변수를 선언하고 함수를 대입하는 방식
 - hoisting 불가능(리터럴 방식의 함수의 경우 함수를 구성한 후에 호출 가능하다)
 - let 변수명 = function([인자1, 인자2, ...]) {
        코드
        [return 반환값]
    }
    변수명(인자값);
 - let addOne = function(x) {
        var y = x + 1;
        return y;
    };
    let i = addOne(1);

3)Function 생성자 함수
 - 자바스크립트 내장 함수
 - 문자열을 파라미터, 코드블록 순서대로 넣어서 생성한다.
   (마지막 파라미터가 코드 블록이고 그 앞이 함수로 전달되는 파라미터이다)
 - 런타임에 받은 문자열을 사용해 함수를 만들 수 있다.
 - let add_custion = new Function("num1", "num2", "return num1 + num2");
   console.log(add_custion(21, 27));

4)화살표 함수
 - let func = (arg1, arg2, ...argN) => expression
 - 아래 코드는 위와 동일한다.
   let func = function(arg1, arg2, ...argN) {
        return expression;
    };
 - 인자 arg1..argN를 받는 함수 func이 만들어지며 함수 func는 화살표(=>) 우측의 표현식(expression)을 평가하고 평가 결과를 반환한다.
 - let sum = (a, b) => a + b;
   /*
    let sum = function(a, b) {
        return a + b;
    };
   */
   alert( sum(1, 2) ); //3
 - 인자가 1개인 경우 괄호 생략 가능하다.
   let double = n => n * 2;
 - 인자가 0개인 경우 괄호를 비울 수 있지만 생략할 수는 없다.
   let sayHi = () => alert("안녕하세요!");