호이스팅(hoisting)
 - 호이스팅이란 인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 의미한다. 
   var로 선언한 변수의 경우 호이스팅시 undefined로 변수를 초기화한다.
   (var을 통해 정의된 변수의 선언문을 유효 범위의 최상단으로 끌어올리는 행위를 말한다)

 - let과 const로 선언한 변수의 경우 호이스팅시 변수를 초기화하지 않는다.
   따라서 변수의 초기화를 수행하기 전에 읽는 코드가 먼저 나타나면 예외가 발생한다.

 - 선언과 할당의 분리라고 생각하면 된다.
   호이스팅을 설명할 땐 주로 "변수의 선언과 초기화를 분리한 후, 선언만 코드의 최상단으로 옮기는" 것으로 말하곤 한다.
   따라서 변수를 정의하는 코드보다 사용하는 코드가 앞서 등장할 수 있다. 
   다만 선언과 초기화를 함께 수행하는 경우, 선언 코드까지 실행해야 변수가 초기화된 상태가 됨을 주의해야 한다.

1)var 변수 호이스팅
 - if(true){
      var name = 'yuddomack';
   }
   console.log(name);
 - 위에 코드는 호이스팅에 의해 아래와 같은 모양으로 바뀌게 된다.
   var name; // 선언 : undefined
   if(true){
      name = 'yuddomack'; // 할당
   }
   console.log(name);

2)함수 호이스팅
 - 함수의 선언 역시 호이스팅의 대상이다. 
   때문에 스코프 내에서 어떤 위치에서 함수 선언을 하든지 호출할 수 있다.
 - sayName();
   function sayName(){
      console.log('yuddomack');
   }