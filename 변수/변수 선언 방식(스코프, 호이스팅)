1)var
 - 중복 선언 가능 + 재할당 가능
 - 원조 변수 선언 방식으로 선언한 변수와 같이 동일한 이름으로 중복 선언이 가능하다.
   (즉, 마지막에 할당된 값이 최종 변수에 저장된다.)
 - 변수를 유연하게 사용할 수 있지만 기존에 선언해둔 변수의 존재를 잊고 재선언하는 경우 문제가 발생할 수 있다.
 - var title = 'book';
   var title = 'movie'; //프로젝트 규모가 클 경우 재선언 뒤에 잊을 가능성 있음
 - 함수레벨 스코프(function level scope)를 가짐
   함수내에서 선언된 변수는 함수 내에서만 유효하고, 함수 내에서는 블록 내외부에 관계없이 유효하다. 
   (함수 외부에서는 참조불가)
 - function function_level() {
    if(true){
        var a = 123;
        console.log(a); //123
    }
    console.log(a); //123
}

2)let
 - 중복 선언 불가 + 재할당 가능
 - ES6 부터 추가된 변수 선언 방식
 - var와 달리 중복선언시 해당 변수는 이미 선언되었다는 에러 메시지가 발생한다.
 - let title = 'book';
   title = 'music';
 - 블록레벨 스코프(block level scope)
   함수, if절 외 for, while, try/catch 등 모든 코드블록 ({..}) 내부에서 선언된 변수는 코드 블록 내부에서만 유효함. 
   (블록 외부부터 참조 불가)
 - function block_level(){
    if(true){
        let a = 123;
        console.log(a); //123
    }

    console.log(a); // ReferenceError: a is not defined.
}

3)const
 - 중복 선언 불가 + 재할당 불가(immutable)
 - ES6 부터 추가된 변수 선언 방식
 - const title = 'book'; //변경 불가
 - 블록레벨 스코프(block level scope)
   함수, if절 외 for, while, try/catch 등 모든 코드블록 ({..}) 내부에서 선언된 변수는 코드 블록 내부에서만 유효함. 
   (블록 외부부터 참조 불가)
 - function block_level(){
    if(true){
        const a = 123;
        console.log(a); //123
    }

    console.log(a); // ReferenceError: a is not defined.
}

*호이스팅(Hoisting)
 - 자바스크립트 함수는 실행되기 전에 함수내 필요한 변수값들을 모두 모아 유효범위의 최상단에 선언한 것 처럼 동작한다. 
   이런 방식을 호이스팅이라 한다. 
 - 자바스크립트 parser가 함수 실행 전 해당 함수전체를 훑는다.
 - 함수 내 존재하는 변수, 함수 선언에 대한 정보를 기억하고 실행한다.
 - 유효범위는 함수 블록 {} 내 인데, 필요한 값들을 블록 위의 상단으로 끌어올리는 것이다.
 - 실제코드가 끌어올려지는 것은 아니고, 자바스크립트 parser 내부적으로 끌어올려 처리하는 것이므로 실제 메모리에서는 변화가 없다.

*var 선언문 호이스팅
 - console.log(a); //undefined : 변수 a가 선언되기 전에 참조시, 에러가 발생하지 않고 undefined가 출력된다. 이는 코드 실행 전에 자바스크립트 내부에서 미리 a변수를 선언하여 undefined로 초기화를 해두었기 때문이다. 
    var a = 123;
    console.log(a); //123
 - test(); //test : 함수 선언문 또한 함수 선언 전 호출시 test를 출력한다.
    function test(){
        console.log("test");
    }

*let, const 선언문 호이스팅
 - let의 경우 변수가 선언되기 전에 참조하면 에러가 발생한다.
   var 변수선언은 변수선언과 동시에 초기화가 이루어지지만 let, const 변수는 선언만 해놓고 초기화는 하지 않는다.
   코드실행과정에서 변수 선언문을 만났을때, 초기화를 수행한다. 
   때문에 호이스팅은 발생하였으나 변수의 선언과 초기화 사이에 일시적으로 변수값을 참조할수 없는 구간인 TDZ(Temporal Dead Zone)에 빠졌기 때문에 보이는 현상이다. 
 - console.log(a); //ReferenceError: a is not defined
    let a = 123;
    console.log(a); // 123
 - test(); // error : 함수선언이 아닌 함수표현식에서 마찬가지의 이유로 에러가 발생하는 것을 확인할 수 있다.
    var test = function() {
        console.log("test");
    }
    test(); // test